#! /usr/bin/env python
# -*- coding: utf-8 -*-

# @Author: ${CREATE_BY}
# @Time: ${CREATE_TIME}
# @File: ${table}.py

import lib.dao.${table}
import lib.common.const as com_const
import lib.common.error as error_const
import lib.common.func as com_func
from lib.model.model import ${Table}
from lib.common.error import ${Table}ErrorType,CommonError
import lib.dao.sequence

def add_${table}(params):
    ts = com_func.get_ts()
    user_id = params['user_id']
    obj = ${Table}(
        ctime=ts,
        mtime=ts,
        create_by=user_id,
        update_by=user_id
    )
    lib.dao.${table}.add_${table}(obj=obj)
    return None, {}


def bulk_add_${table}(params):
    ts = com_func.get_ts()
    user_id = params['user_id']
    info_list = params['info_list']
    data_list = []
    for info in info_list:
        data_list.append(
            {
                'ctime': ts,
                'mtime': ts,
                'create_by': user_id,
                'update_by': user_id,
            }
        )
    lib.dao.${table}.bulk_add_${table}(data_list=data_list)
    return None, {}


def update_${table}(params):
    ts = com_func.get_ts()
    user_id = params['user_id']
    ${table}_id = params['${table}_id']
    data_dict = {
        'mtime': ts,
        'update_by': user_id
    }
    lib.dao.${table}.update_${table}(
        ${table}_id=${table}_id,
        data_dict=data_dict
    )
    return None, {}


def delete_${table}(params):
    ${table}_id = params['${table}_id']
    lib.dao.${table}.delete_${table}(${table}_id=${table}_id)
    return None, {}


def get_${table}(params):
    ${table}_id = params['${table}_id']
    data = lib.dao.${table}.get_${table}(${table}_id=${table}_id)
    return None, data


def get_${table}_list(params):
    page = int(params['page'])
    pagesize = int(params['pagesize'])
    data_list = lib.dao.${table}.get_${table}_list(
        page=page,
        pagesize=pagesize
    )
    count = lib.dao.${table}.get_${table}_list_count()
    result = com_func.pagination(
        data_list, count, page, pagesize
    )
    return None, result