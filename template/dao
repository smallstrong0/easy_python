#! /usr/bin/env python
# -*- coding: utf-8 -*-

# @Author: ${CREATE_BY}
# @Time: ${CREATE_TIME}
# @File: ${table}.py

import lib.dao.${table}_mysql as ${table}_mysql
import lib.dao.${table}_redis as ${table}_redis
import lib.common.const as com_const
import lib.common.error as error_const
import lib.common.func as com_func
from sqlalchemy import create_engine, or_, and_, any_, text, exists, func, distinct, between

from lib.model.model import ${Table}

# 注意所有的sql都传列表类型
### add func #####

def add_${table}(obj):
    ${table}_mysql.add_${table}(
        data_obj=obj
    )

def bulk_add_${table}(data_list):
    ${table}_mysql.bulk_add_${table}(data_list=data_list)

### add func #####

### delete func #####
def delete_${table}(${table}_id=-1):
    filters = []
    if ${table}_id != -1:
        filters.append(${Table}.${table}_id == ${table}_id)
    # ${table}_mysql.delete_${table}(
    #     filters=filters
    # )
    ${table}_mysql.update_${table}(
        filters=filters,
        data_dict={
            'is_delete': 1,
            'mtime': com_func.get_ts()
        }
    )

### delete func #####

### update func #####
def update_${table}(${table}_id=-1, data_dict={}):
    filters = []
    if ${table}_id != -1:
        filters.append(${Table}.${table}_id == ${table}_id)
    ${table}_mysql.update_${table}(
        filters=filters,
        data_dict=data_dict
    )

def bulk_update_${table}(data_list):
    ${table}_mysql.bulk_update_${table}(data_list=data_list)

### update func #####

### get one data func #####
def get_${table}(${table}_id=-1):
    filters = [${Table}.is_delete == 0]
    if ${table}_id != -1:
        filters.append(${Table}.${table}_id == ${table}_id)
    data = ${table}_mysql.get_${table}(
        query_list=[${Table}],
        filters=filters,
    )
    return data

### get one data func #####

### get data_list func #####
def get_${table}_list_all(${table}_id_list=-1):
    filters = [${Table}.is_delete == 0]
    if ${table}_id_list != -1:
        filters.append(${Table}.${table}_id.in_(${table}_id_list))
    order_by = [${Table}.ctime.desc()]
    data_list = ${table}_mysql.get_${table}_list(
        query_list=[${Table}],
        filters=filters,
        order_by=order_by,
    )
    return data_list


def get_${table}_list(${table}_id_list=-1, page=1, pagesize=10):
    filters = [${Table}.is_delete == 0]
    if ${table}_id_list != -1:
        filters.append(${Table}.${table}_id.in_(${table}_id_list))
    order_by = [${Table}.ctime.desc()]
    data_list = ${table}_mysql.get_${table}_list(
        query_list=[${Table}],
        filters=filters,
        order_by=order_by,
        offset=pagesize * int(page - 1),
        limit=pagesize
    )
    return data_list


def get_${table}_list_count(${table}_id_list=-1):
    filters = [${Table}.is_delete == 0]
    if ${table}_id_list != -1:
        filters.append(${Table}.${table}_id.in_(${table}_id_list))
    count = ${table}_mysql.get_${table}_list_count(
        query_list=[func.count(${Table}.${table}_id)],
        filters=filters,
    )
    return count


### get data_list func #####
